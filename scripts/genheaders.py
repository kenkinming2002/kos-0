#!/usr/bin/env python

import os
from pathlib import Path
from contextlib import contextmanager
import pprint
import yaml


@contextmanager
def open_file_overwrite(file_name : str, file_header : str):
    if os.path.exists(file_name):
        with open(file_name, "r+") as f:
            if file_header != f.read(len(file_header)):
                raise ValueError("Header %s is user-created" % file_name)
            f.seek(0)
            f.truncate(len(file_header))
            yield f
    else:
        if not os.path.exists(os.path.dirname(file_name)):
            os.makedirs(os.path.dirname(file_name))
        with open(file_name, 'x') as f:
            f.write(file_header)
            yield f

class ArchitectureHeader:
    def __init__(self, path):
        path = Path(path)
        path = path.relative_to('arch/')
        self.arch = str(path.parts[0])
        self.path = Path(*path.parts[3:])
        print(str(self.path))

def read_file(file_name):
    with open(file_name) as f:
        return f.read()

class GenericHeader:
    template = read_file("template.hpp")

    def __init__(self, path):
        self.path = path

    def create(self):
        with open_file_overwrite(os.path.join("include/", self.path), "/// This file is automatically generated. DO NOT EDIT.\n") as generic_header:
            content = GenericHeader.template.replace("FILE_NAME", str(self.path))
            generic_header.write(content)

def get_architecture_headers():
    architecture_headers = list()
    architecture_directories = filter(os.DirEntry.is_dir, os.scandir('arch'))
    for architecture_directory in architecture_directories:
        for dirpath, dirnames, filenames in os.walk(architecture_directory):
            architecture_headers.extend([ArchitectureHeader(os.path.join(dirpath, filename)) for filename in filenames if filename.endswith(('.h', '.hpp'))])
    return architecture_headers

def get_generic_headers():
    generic_headers_map = dict()
    for architecture_header in get_architecture_headers():
        if architecture_header.path not in generic_headers_map:
            generic_headers_map[architecture_header.path] = GenericHeader(architecture_header.path)
    return list(generic_headers_map.values())

for generic_header in get_generic_headers():
    generic_header.create()
